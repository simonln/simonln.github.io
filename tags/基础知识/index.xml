<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>基础知识 - Tag - qingxin's blog</title><link>https://www.qingxin.org/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><description>基础知识 - Tag - qingxin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 23 Jul 2022 16:07:00 +0000</lastBuildDate><atom:link href="https://www.qingxin.org/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" rel="self" type="application/rss+xml"/><item><title>单元测试中的插桩技术</title><link>https://www.qingxin.org/hexo_unittest_hook/</link><pubDate>Sat, 23 Jul 2022 16:07:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_unittest_hook/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/unittest_hook_0.png" referrerpolicy="no-referrer">
&lt;/div>1. 背景 在编写C/C++代码的过程中经常遇到需要给代码做单元测试的情况，以此验证代码的逻辑是否符合设计的要求。 但是在进行单元测试的过程我们需要</description></item><item><title>LUA开发那些事</title><link>https://www.qingxin.org/hexo_lua_dev/</link><pubDate>Sun, 17 Jul 2022 21:49:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_lua_dev/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/lua_dev_0.png" referrerpolicy="no-referrer">
&lt;/div>前言 lua是一门很小巧的脚本语言，完全是由C实现。正因为它的小巧，所以现在很多项目拿它来做嵌入执行的脚本，这中操作在游戏行业中非常普遍。 1. lua</description></item><item><title>设计模式总结四</title><link>https://www.qingxin.org/hexo_design_mode_four/</link><pubDate>Sat, 28 Aug 2021 21:56:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_design_mode_four/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>这一部分总结一下行为型设计模式中的5个，分别是：中介者模式、访问者模式、策略模式、备忘录模式、迭代器模式 4.1 中介者模式 (Mediator) 特点： 用一个中介对象来</description></item><item><title>设计模式总结三</title><link>https://www.qingxin.org/design_mode_three/</link><pubDate>Fri, 27 Aug 2021 21:56:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/design_mode_three/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>这一部分总结一下行为型设计模式中的6个，分别是：观察者模式、模板方法模式、命令模式、状态模式、职责链模式、解释器模式。 3.1 观察者模式 (Observer) 特点： 定</description></item><item><title>设计模式总结二</title><link>https://www.qingxin.org/hexo_design_mode_two/</link><pubDate>Fri, 03 Jul 2020 09:10:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_design_mode_two/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>结构型模式主要有：适配器模式，装饰模式，桥接模式，组合模式，享元模式，代理模式，外观模式 2.1 适配器模式 (Adapter) 特点： 将一个类的接口转换成客户希望的另</description></item><item><title>设计模式总结一</title><link>https://www.qingxin.org/hexo_design_mode_one/</link><pubDate>Sat, 21 Mar 2020 10:45:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_design_mode_one/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
            </div>说起可复用的面向对象软件，我又想起了一句&quot;至理名言&rdquo;，万物基于MIUI 设计模式就是一套基于面向对象而总结出来的设计范式]]></description></item><item><title>CANoe入门与使用</title><link>https://www.qingxin.org/hexo_canoe_getting_started/</link><pubDate>Thu, 22 Mar 2018 16:19:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_canoe_getting_started/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/canoe_using_0.png" referrerpolicy="no-referrer">
&lt;/div>带着问题去学习，才能防止迷失在知识的海洋 问题： 为什么我们要使用CANoe开发? CANoe是什么？ ECU的开发流程？ CANoe在ECU的开发流</description></item><item><title>CAN网络管理</title><link>https://www.qingxin.org/hexo_can_network_manage/</link><pubDate>Wed, 30 Aug 2017 13:54:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_can_network_manage/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/can_base_0.png" referrerpolicy="no-referrer">
&lt;/div>什么是CAN网络管理？ 对CAN网络中的节点进行管理（启动，运行和休眠）的一种机制，分为直接网络管理和间接网络管理。直接网络管理由特定的网络管</description></item><item><title>STM32的IAP</title><link>https://www.qingxin.org/hexo_stm32_iap/</link><pubDate>Wed, 22 Feb 2017 18:00:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_stm32_iap/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/stm32_printf_0.jpg" referrerpolicy="no-referrer">
&lt;/div>IAP(In-Application-Programming)即在应用编程。传统的STM32应用编程需要使用调试器或者改变STM32的启动方</description></item><item><title>CAN协议知识点</title><link>https://www.qingxin.org/hexo_can_protocol_points/</link><pubDate>Mon, 20 Feb 2017 17:17:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_can_protocol_points/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/can_base_0.png" referrerpolicy="no-referrer">
&lt;/div>CAN的出现 CAN（Controller Area Network）是BOSCH公司于20世纪80年代开发用于汽车中各个仪器数据交换的串行通信协议。C</description></item></channel></rss>