<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>qingxin's blog</title><link>https://www.qingxin.org/</link><description>清新的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 21 Nov 2019 23:51:18 +0000</lastBuildDate><atom:link href="https://www.qingxin.org/index.xml" rel="self" type="application/rss+xml"/><item><title>单元测试中的插桩技术</title><link>https://www.qingxin.org/hexo_unittest_hook/</link><pubDate>Sat, 23 Jul 2022 16:07:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_unittest_hook/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/unittest_hook_0.png" referrerpolicy="no-referrer">
&lt;/div>1. 背景 在编写C/C++代码的过程中经常遇到需要给代码做单元测试的情况，以此验证代码的逻辑是否符合设计的要求。 但是在进行单元测试的过程我们需要</description></item><item><title>LUA开发那些事</title><link>https://www.qingxin.org/hexo_lua_dev/</link><pubDate>Sun, 17 Jul 2022 21:49:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_lua_dev/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/lua_dev_0.png" referrerpolicy="no-referrer">
&lt;/div>前言 lua是一门很小巧的脚本语言，完全是由C实现。正因为它的小巧，所以现在很多项目拿它来做嵌入执行的脚本，这中操作在游戏行业中非常普遍。 1. lua</description></item><item><title>排查一个同名函数引发的问题</title><link>https://www.qingxin.org/hexo_same_file/</link><pubDate>Sun, 17 Apr 2022 12:20:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_same_file/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/c&#43;&#43;_0.png" referrerpolicy="no-referrer">
            </div>1.前景提要 在一次代码安全审计完成后，安全部门提出一个历史遗留问题需要修改。修改的方法也很简单，只需要调用库里的函数判断一下是否有问题即可。]]></description></item><item><title>读乡土中国有感</title><link>https://www.qingxin.org/feeling_read_rural_china/</link><pubDate>Sun, 09 Jan 2022 15:32:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/feeling_read_rural_china/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/country_china_0.jpg" referrerpolicy="no-referrer">
&lt;/div>生于斯，而长于斯 引子 一直非常喜欢《乡土中国》这本书，当时在上大学的时候就很喜欢，这种喜欢可能源于我生长和生活的这片土地。当时对这片土地有着诸</description></item><item><title>设计模式总结四</title><link>https://www.qingxin.org/hexo_design_mode_four/</link><pubDate>Sat, 28 Aug 2021 21:56:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_design_mode_four/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>这一部分总结一下行为型设计模式中的5个，分别是：中介者模式、访问者模式、策略模式、备忘录模式、迭代器模式 4.1 中介者模式 (Mediator) 特点： 用一个中介对象来</description></item><item><title>设计模式总结三</title><link>https://www.qingxin.org/design_mode_three/</link><pubDate>Fri, 27 Aug 2021 21:56:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/design_mode_three/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>这一部分总结一下行为型设计模式中的6个，分别是：观察者模式、模板方法模式、命令模式、状态模式、职责链模式、解释器模式。 3.1 观察者模式 (Observer) 特点： 定</description></item><item><title>将hexo博客由本地迁移到GitHub Actions</title><link>https://www.qingxin.org/hexo_to_action/</link><pubDate>Sun, 13 Jun 2021 22:58:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_to_action/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/migrate_hexo_1.jpg" referrerpolicy="no-referrer">
&lt;/div>前言 从很久很久之前，就建起了hexo博客。以前的步骤是在笔记本中新装一个ubuntu系统，然后安装nodejs以及hexo，然后新建博客文章</description></item><item><title>KMP算法中的DFA计算</title><link>https://www.qingxin.org/hexo_kmp_dfa/</link><pubDate>Wed, 09 Sep 2020 22:33:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_kmp_dfa/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/gen_dfa_0.png" referrerpolicy="no-referrer">
&lt;/div>假定模式字符串为 “ABABAC” 1. 构造DFA 推入第一位字符 当推入的字符是A时匹配，往下走一步即 1; 当推入B或C时不匹配，那就还在原地呆着即 0 推</description></item><item><title>设计模式总结二</title><link>https://www.qingxin.org/hexo_design_mode_two/</link><pubDate>Fri, 03 Jul 2020 09:10:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_design_mode_two/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>结构型模式主要有：适配器模式，装饰模式，桥接模式，组合模式，享元模式，代理模式，外观模式 2.1 适配器模式 (Adapter) 特点： 将一个类的接口转换成客户希望的另</description></item><item><title>使用FFTW库</title><link>https://www.qingxin.org/hexo_fftw_usage/</link><pubDate>Wed, 20 May 2020 10:02:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_fftw_usage/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/fftw_0.jpg" referrerpolicy="no-referrer">
&lt;/div>1. 前言 在需要加速计算的场景下，将部分MATLAB代码替换成C代码，此时就碰到需要使用FFT（fast fourier transform）的场景。在C中能使</description></item></channel></rss>