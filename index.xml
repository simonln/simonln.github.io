<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>qingxin's blog</title><link>https://www.qingxin.org/</link><description>清新的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 21 Nov 2019 23:51:18 +0000</lastBuildDate><atom:link href="https://www.qingxin.org/index.xml" rel="self" type="application/rss+xml"/><item><title>算法备忘</title><link>https://www.qingxin.org/hexo_algorithm_note/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_algorithm_note/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/algorithm_note_0.jpg" referrerpolicy="no-referrer">
&lt;/div>读完《剑指offer》之后发现有一些算法题有点不理解，故在此记录一下解题思路和代码 1.矩阵中的路径 请设计一函数，用来判断再一个矩阵中是否存在</description></item><item><title>珠海海岛游记</title><link>https://www.qingxin.org/hexo_zhuhai_island/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_zhuhai_island/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/zhuhai_island_0.jpg" referrerpolicy="no-referrer">
&lt;/div>珠海三大离岛：外伶仃，桂山，东澳 外伶仃 19年因为一首诗去了外伶仃，即“惶恐滩头说惶恐，伶仃洋里叹伶仃”。外伶仃的沙滩是最干净的，水清沙白，非</description></item><item><title>RouteOS配置Radius认证</title><link>https://www.qingxin.org/hexo_routeos_radius/</link><pubDate>Fri, 07 Apr 2023 13:14:53 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_routeos_radius/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/routeos_radius_0.jpg" referrerpolicy="no-referrer">
&lt;/div>1.背景 由于有外部用户需要访问网络的需求，但是又不方便将主网络公开出去，防止外部做渗透测试和扫描。所以单独给访客网络配置一种简单的认证方式，</description></item><item><title>RSA加解密</title><link>https://www.qingxin.org/hexo_rsa_algorithm/</link><pubDate>Wed, 05 Apr 2023 13:14:53 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_rsa_algorithm/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/rsa_algorithm_0.png" referrerpolicy="no-referrer">
&lt;/div>1.背景 在常用的公开环境中，我们可能想说一些不想公开的悄悄话，这时候可能需要将悄悄话进行加密然后发送给对方。 这时候我们可以使用一种大家都知道</description></item><item><title>单元测试中的插桩技术</title><link>https://www.qingxin.org/hexo_unittest_hook/</link><pubDate>Sat, 23 Jul 2022 16:07:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_unittest_hook/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/unittest_hook_0.png" referrerpolicy="no-referrer">
&lt;/div>1. 背景 在编写C/C++代码的过程中经常遇到需要给代码做单元测试的情况，以此验证代码的逻辑是否符合设计的要求。 但是在进行单元测试的过程我们需要</description></item><item><title>LUA开发那些事</title><link>https://www.qingxin.org/hexo_lua_dev/</link><pubDate>Sun, 17 Jul 2022 21:49:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_lua_dev/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/lua_dev_0.png" referrerpolicy="no-referrer">
&lt;/div>前言 lua是一门很小巧的脚本语言，完全是由C实现。正因为它的小巧，所以现在很多项目拿它来做嵌入执行的脚本，这中操作在游戏行业中非常普遍。 1. lua</description></item><item><title>排查一个同名函数引发的问题</title><link>https://www.qingxin.org/hexo_same_file/</link><pubDate>Sun, 17 Apr 2022 12:20:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_same_file/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/c&#43;&#43;_0.png" referrerpolicy="no-referrer">
            </div>1.前景提要 在一次代码安全审计完成后，安全部门提出一个历史遗留问题需要修改。修改的方法也很简单，只需要调用库里的函数判断一下是否有问题即可。]]></description></item><item><title>读乡土中国有感</title><link>https://www.qingxin.org/feeling_read_rural_china/</link><pubDate>Sun, 09 Jan 2022 15:32:00 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/feeling_read_rural_china/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/country_china_0.jpg" referrerpolicy="no-referrer">
&lt;/div>生于斯，而长于斯 引子 一直非常喜欢《乡土中国》这本书，当时在上大学的时候就很喜欢，这种喜欢可能源于我生长和生活的这片土地。当时对这片土地有着诸</description></item><item><title>设计模式总结四</title><link>https://www.qingxin.org/hexo_design_mode_four/</link><pubDate>Sat, 28 Aug 2021 21:56:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/hexo_design_mode_four/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>这一部分总结一下行为型设计模式中的5个，分别是：中介者模式、访问者模式、策略模式、备忘录模式、迭代器模式 4.1 中介者模式 (Mediator) 特点： 用一个中介对象来</description></item><item><title>设计模式总结三</title><link>https://www.qingxin.org/design_mode_three/</link><pubDate>Fri, 27 Aug 2021 21:56:03 +0000</pubDate><author>qingxin</author><guid>https://www.qingxin.org/design_mode_three/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/design_pattern_0.jpg" referrerpolicy="no-referrer">
&lt;/div>这一部分总结一下行为型设计模式中的6个，分别是：观察者模式、模板方法模式、命令模式、状态模式、职责链模式、解释器模式。 3.1 观察者模式 (Observer) 特点： 定</description></item></channel></rss>